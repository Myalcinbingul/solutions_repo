{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1: Investigating the Range as a Function of Launch Angle Motivation Projectile motion is a classic physics topic that helps explain the motion of objects under gravity. Our goal is to understand how the range of a projectile depends on the launch angle , both: analytically (with equations) and numerically (via Python simulations) We\u2019ll start with no air resistance and gradually introduce more realistic effects like air drag , wind , and numerical simulation techniques . 1. Differential Equations of Motion Without Air Resistance We apply Newton\u2019s Second Law: \\[ \\vec{F} = m\\vec{a} \\] 2. Numerical Solution (With Air Resistance) Drag Force: \\(\\vec{F}_{drag} = -k\\vec{v}\\) Horizontal direction: $$ \\frac{d^2x}{dt^2} = 0 \\quad \\Rightarrow \\quad \\frac{dx}{dt} = v_0 \\cos(\\theta) $$ Vertical direction: $$ \\frac{d^2y}{dt^2} = -g \\quad \\Rightarrow \\quad \\frac{dy}{dt} = v_0 \\sin(\\theta) - gt $$ With Air Resistance (Linear Drag) Air drag is modeled as a force proportional to velocity: \\[ \\vec{F}_{\\text{drag}} = -k \\vec{v} \\] - Horizontal direction: \\[ \\frac{dv_x}{dt} = -k v_x \\] - Vertical direction: \\[ \\frac{dv_y}{dt} = -g - k v_y \\] These are first-order differential equations that generally require numerical methods (like Euler\u2019s or Runge-Kutta) to solve. 2. Kinematic Equations For a projectile launched from height \\(h\\) , initial speed \\(v_0\\) , and angle \\(\\theta\\) , the motion can be described by: Horizontal displacement : $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical displacement : $$ y(t) = h + v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Horizontal velocity : $$ v_x = v_0 \\cos(\\theta) $$ Vertical velocity : $$ v_y(t) = v_0 \\sin(\\theta) - g t $$ Speed at time \\( t \\) : $$ v(t) = \\sqrt{v_x^2 + v_y(t)^2} $$ Where: - \\(g\\) is the acceleration due to gravity (typically \\(9.81 \\, \\text{m/s}^2\\) ), - \\(t\\) is the time elapsed, - \\(x(t)\\) and \\(y(t)\\) are the positions at time \\(t\\) , - \\(v_x\\) , \\(v_y(t)\\) are the velocity components. Horizontal position: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical position: $$ y(t) = h + v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 $$ \u23f1 3. Time of Flight We want to find the total time \\( t \\) the projectile stays in the air. Set the vertical position \\( y(t) = 0 \\) to find when the projectile returns to ground level. From the kinematic equation: $$ y(t) = h + v_0 \\sin(\\theta)t - \\frac{1}{2}gt^2 $$ Set \\( y(t) = 0 \\) : $$ 0 = h + v_0 \\sin(\\theta)t - \\frac{1}{2}gt^2 $$ This is a quadratic equation in \\( t \\) : $$ \\frac{1}{2}gt^2 - v_0 \\sin(\\theta)t - h = 0 $$ Solve using the quadratic formula: $$ t = \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2gh}}{g} $$ Note: We discard the negative root since time cannot be negative. 4. Range of the Projectile The range is the horizontal distance when \\( y = 0 \\) : \\[ R = v_0 \\cos(\\theta) \\cdot t \\] If \\( h = 0 \\) , simplifies to: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] Insight : Maximum range occurs when \\[ \\theta = 45^\\circ \\] import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # gravity (m/s^2) # Function to generate projectile motion def projectile_motion(v0, theta_deg, h=0, dt=0.01): theta = np.radians(theta_deg) vx = v0 * np.cos(theta) vy = v0 * np.sin(theta) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt x.append(vx * t) y.append(h + vy * t - 0.5 * g * t**2) return x, y # -------- Plot (a): Varying Initial Velocity, \u03b8 = 45\u00b0 -------- v0_list = [30, 40, 50] theta_fixed = 45 plt.figure(figsize=(10, 5)) for v0 in v0_list: x, y = projectile_motion(v0, theta_fixed) plt.plot(x, y, label=f'$v_0$ = {v0} m/s') plt.title('(a) Varying Initial Velocity at $\\\\theta$ = 45\u00b0') plt.xlabel('Range (m)') plt.ylabel('Height (m)') plt.grid(True) plt.legend() plt.axis('equal') plt.show() # -------- Plot (b): Varying Angle, v0 = 50 m/s -------- theta_list = [15, 45, 75] v0_fixed = 50 plt.figure(figsize=(10, 5)) for theta in theta_list: x, y = projectile_motion(v0_fixed, theta) plt.plot(x, y, label=f'$\\\\theta$ = {theta}\u00b0') plt.title('(b) Varying Launch Angle at $v_0$ = 50 m/s') plt.xlabel('Range (m)') plt.ylabel('Height (m)') plt.grid(True) plt.legend() plt.axis('equal') plt.show() 5. Example Calculations Example 1: Finding the Maximum Range If \\(v_0 = 20\\) m/s and \\(h=0\\) , \\[ R = \\frac{20^2 \\sin(2 \\times 45^\\circ)}{9.81} \\approx 40.8 \\text{ m} \\] Example 2: Effect of Launch Height If \\(v_0 = 20\\) m/s and \\(h=5\\) m, Using the general range formula, we get: \\[ R \\approx 45.2 \\text{ m} \\]","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1-investigating-the-range-as-a-function-of-launch-angle","text":"","title":"Problem 1: Investigating the Range as a Function of Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion is a classic physics topic that helps explain the motion of objects under gravity. Our goal is to understand how the range of a projectile depends on the launch angle , both: analytically (with equations) and numerically (via Python simulations) We\u2019ll start with no air resistance and gradually introduce more realistic effects like air drag , wind , and numerical simulation techniques .","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-differential-equations-of-motion","text":"","title":"1. Differential Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#without-air-resistance","text":"We apply Newton\u2019s Second Law: \\[ \\vec{F} = m\\vec{a} \\]","title":"Without Air Resistance"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-numerical-solution-with-air-resistance","text":"Drag Force: \\(\\vec{F}_{drag} = -k\\vec{v}\\) Horizontal direction: $$ \\frac{d^2x}{dt^2} = 0 \\quad \\Rightarrow \\quad \\frac{dx}{dt} = v_0 \\cos(\\theta) $$ Vertical direction: $$ \\frac{d^2y}{dt^2} = -g \\quad \\Rightarrow \\quad \\frac{dy}{dt} = v_0 \\sin(\\theta) - gt $$","title":"2. Numerical Solution (With Air Resistance)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#with-air-resistance-linear-drag","text":"Air drag is modeled as a force proportional to velocity: \\[ \\vec{F}_{\\text{drag}} = -k \\vec{v} \\]","title":"With Air Resistance (Linear Drag)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#-horizontal-direction","text":"\\[ \\frac{dv_x}{dt} = -k v_x \\]","title":"- Horizontal direction:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#-vertical-direction","text":"\\[ \\frac{dv_y}{dt} = -g - k v_y \\] These are first-order differential equations that generally require numerical methods (like Euler\u2019s or Runge-Kutta) to solve.","title":"- Vertical direction:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-kinematic-equations","text":"For a projectile launched from height \\(h\\) , initial speed \\(v_0\\) , and angle \\(\\theta\\) , the motion can be described by: Horizontal displacement : $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical displacement : $$ y(t) = h + v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Horizontal velocity : $$ v_x = v_0 \\cos(\\theta) $$ Vertical velocity : $$ v_y(t) = v_0 \\sin(\\theta) - g t $$ Speed at time \\( t \\) : $$ v(t) = \\sqrt{v_x^2 + v_y(t)^2} $$ Where: - \\(g\\) is the acceleration due to gravity (typically \\(9.81 \\, \\text{m/s}^2\\) ), - \\(t\\) is the time elapsed, - \\(x(t)\\) and \\(y(t)\\) are the positions at time \\(t\\) , - \\(v_x\\) , \\(v_y(t)\\) are the velocity components. Horizontal position: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical position: $$ y(t) = h + v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 $$","title":"2. Kinematic Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-time-of-flight","text":"We want to find the total time \\( t \\) the projectile stays in the air. Set the vertical position \\( y(t) = 0 \\) to find when the projectile returns to ground level. From the kinematic equation: $$ y(t) = h + v_0 \\sin(\\theta)t - \\frac{1}{2}gt^2 $$ Set \\( y(t) = 0 \\) : $$ 0 = h + v_0 \\sin(\\theta)t - \\frac{1}{2}gt^2 $$ This is a quadratic equation in \\( t \\) : $$ \\frac{1}{2}gt^2 - v_0 \\sin(\\theta)t - h = 0 $$ Solve using the quadratic formula: $$ t = \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2gh}}{g} $$ Note: We discard the negative root since time cannot be negative.","title":"\u23f1 3. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-range-of-the-projectile","text":"The range is the horizontal distance when \\( y = 0 \\) : \\[ R = v_0 \\cos(\\theta) \\cdot t \\] If \\( h = 0 \\) , simplifies to: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] Insight : Maximum range occurs when \\[ \\theta = 45^\\circ \\] import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # gravity (m/s^2) # Function to generate projectile motion def projectile_motion(v0, theta_deg, h=0, dt=0.01): theta = np.radians(theta_deg) vx = v0 * np.cos(theta) vy = v0 * np.sin(theta) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt x.append(vx * t) y.append(h + vy * t - 0.5 * g * t**2) return x, y # -------- Plot (a): Varying Initial Velocity, \u03b8 = 45\u00b0 -------- v0_list = [30, 40, 50] theta_fixed = 45 plt.figure(figsize=(10, 5)) for v0 in v0_list: x, y = projectile_motion(v0, theta_fixed) plt.plot(x, y, label=f'$v_0$ = {v0} m/s') plt.title('(a) Varying Initial Velocity at $\\\\theta$ = 45\u00b0') plt.xlabel('Range (m)') plt.ylabel('Height (m)') plt.grid(True) plt.legend() plt.axis('equal') plt.show() # -------- Plot (b): Varying Angle, v0 = 50 m/s -------- theta_list = [15, 45, 75] v0_fixed = 50 plt.figure(figsize=(10, 5)) for theta in theta_list: x, y = projectile_motion(v0_fixed, theta) plt.plot(x, y, label=f'$\\\\theta$ = {theta}\u00b0') plt.title('(b) Varying Launch Angle at $v_0$ = 50 m/s') plt.xlabel('Range (m)') plt.ylabel('Height (m)') plt.grid(True) plt.legend() plt.axis('equal') plt.show()","title":"4. Range of the Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-example-calculations","text":"","title":"5. Example Calculations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#example-1-finding-the-maximum-range","text":"If \\(v_0 = 20\\) m/s and \\(h=0\\) , \\[ R = \\frac{20^2 \\sin(2 \\times 45^\\circ)}{9.81} \\approx 40.8 \\text{ m} \\]","title":"Example 1: Finding the Maximum Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#example-2-effect-of-launch-height","text":"If \\(v_0 = 20\\) m/s and \\(h=5\\) m, Using the general range formula, we get: \\[ R \\approx 45.2 \\text{ m} \\]","title":"Example 2: Effect of Launch Height"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Forced Damped Pendulum Analysis 1. Theoretical Foundation The forced damped pendulum is governed by the following differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] where: - \\(\\theta\\) is the angular displacement, - \\(b\\) is the damping coefficient, - \\(g\\) is the gravitational acceleration, - \\(L\\) is the length of the pendulum, - \\(A\\) is the amplitude of the external forcing, - \\(\\omega\\) is the driving frequency. 1.1 Approximate Solution for Small-Angle Oscillations For small angles, we approximate: \\[ \\sin\\theta \\approx \\theta \\] which simplifies the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is a linear nonhomogeneous differential equation. The general solution consists of: - Homogeneous solution (natural response): $$ \\theta_h (t) = C_1 e^{-\\frac{b}{2} t} \\cos \\left( \\omega_0 t + \\phi \\right) $$ where \\(\\omega_0 = \\sqrt{\\frac{g}{L} - \\frac{b^2}{4}}\\) is the damped natural frequency. Particular solution (steady-state response): $$ \\theta_p (t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}} \\cos(\\omega t - \\delta) $$ where \\(\\delta\\) is the phase shift. Thus, the full solution is: \\[ \\theta (t) = \\theta_h (t) + \\theta_p (t) \\] 1.2 Resonance Conditions Resonance occurs when the driving frequency \\(\\omega\\) is close to the natural frequency of the system. At resonance: \\[ \\omega \\approx \\omega_0 \\] Energy absorption is maximized, leading to large oscillations if damping is small. 2. Analysis of Dynamics 2.1 Influence of System Parameters Damping coefficient \\(b\\) : Higher damping suppresses oscillations and prevents resonance. Driving amplitude \\(A\\) : Larger forcing increases the steady-state oscillation amplitude. Driving frequency \\(\\omega\\) : Controls resonance and possible transition to chaotic motion. -This plot shows how \\(\\theta(t)\\) evolves over time for different parameter values. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define system parameters g = 9.81 # gravity (m/s^2) L = 1.0 # length of pendulum (m) b = 0.2 # damping coefficient A = 1.2 # driving amplitude omega = 2.0 # driving frequency # Define the equation of motion def pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Time span and initial conditions t_span = (0, 50) y0 = [0.1, 0] # Small initial displacement t_eval = np.linspace(*t_span, 1000) sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) # Plot the solution plt.figure(figsize=(8, 5)) plt.plot(sol.t, sol.y[0]) plt.xlabel('Time (s)') plt.ylabel('Theta (rad)') plt.title('Time Evolution of Theta') plt.grid() plt.show() 2.2 Regular vs. Chaotic Motion At low amplitudes, motion remains periodic. However, increasing \\(A\\) and modifying \\(\\omega\\) can lead to chaotic behavior, characterized by sensitivity to initial conditions. Regular omega_values = np.linspace(1.0, 2.5, 50) theta_max = [] for w in omega_values: omega = w sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) theta_max.append(np.max(sol.y[0][-100:])) plt.figure(figsize=(8, 5)) plt.plot(omega_values, theta_max, 'bo', markersize=2) plt.xlabel('Driving Frequency \u03c9') plt.ylabel('Max Theta (rad)') plt.title('Bifurcation Diagram') plt.grid() plt.show() # Sample points at the period of the driving force poincare_t = np.arange(0, 50, 2 * np.pi / omega) poincare_theta = np.interp(poincare_t, sol.t, sol.y[0]) poincare_omega = np.interp(poincare_t, sol.t, sol.y[1]) plt.figure(figsize=(8, 5)) plt.scatter(poincare_theta, poincare_omega, s=10, color='r') plt.xlabel('Theta (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid() plt.show() Chaotic plt.figure(figsize=(8, 5)) plt.plot(sol.y[0], sol.y[1], label='Phase Portrait') plt.xlabel('Theta (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.title('Phase Portrait of the Forced Damped Pendulum') plt.legend() plt.grid() plt.show() 3. Practical Applications Energy harvesting: Extracting vibrational energy for power generation. Suspension bridges: Resonance effects in structural engineering. Oscillating circuits: Analogous to forced RLC circuits in electrical engineering. 4. Computational Implementation We use Python to numerically solve and visualize the forced damped pendulum using the Runge-Kutta method. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define system parameters g = 9.81 # gravity (m/s^2) L = 1.0 # length of pendulum (m) b = 0.2 # damping coefficient A = 1.2 # driving amplitude omega = 2.0 # driving frequency def pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Time span and initial conditions t_span = (0, 50) y0 = [0.1, 0] # Small initial displacement t_eval = np.linspace(*t_span, 1000) sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) # Plot the solution plt.plot(sol.t, sol.y[0]) plt.xlabel('Time (s)') plt.ylabel('Theta (rad)') plt.title('Forced Damped Pendulum Motion') plt.grid() plt.show() 4.1 Phase Portrait and Poincar\u00e9 Section To visualize transitions to chaos, we plot phase portraits and Poincar\u00e9 sections: plt.plot(sol.y[0], sol.y[1], label='Phase Portrait') plt.xlabel('Theta (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.legend() plt.grid() plt.show() 5. Discussion 5.1 Limitations Small-angle approximation loses accuracy for large oscillations. Real-world damping is often nonlinear. External forcing may not always be purely periodic. 5.2 Extensions Nonlinear damping: Explore air resistance effects. Stochastic forcing: Random perturbations for real-world modeling. 6. Conclusion This study illustrates the rich dynamics of the forced damped pendulum, from simple harmonic motion to chaos. Through theoretical analysis and computational modeling, we gain insight into key factors influencing oscillatory systems.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-analysis","text":"","title":"Forced Damped Pendulum Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is governed by the following differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] where: - \\(\\theta\\) is the angular displacement, - \\(b\\) is the damping coefficient, - \\(g\\) is the gravitational acceleration, - \\(L\\) is the length of the pendulum, - \\(A\\) is the amplitude of the external forcing, - \\(\\omega\\) is the driving frequency.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-approximate-solution-for-small-angle-oscillations","text":"For small angles, we approximate: \\[ \\sin\\theta \\approx \\theta \\] which simplifies the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is a linear nonhomogeneous differential equation. The general solution consists of: - Homogeneous solution (natural response): $$ \\theta_h (t) = C_1 e^{-\\frac{b}{2} t} \\cos \\left( \\omega_0 t + \\phi \\right) $$ where \\(\\omega_0 = \\sqrt{\\frac{g}{L} - \\frac{b^2}{4}}\\) is the damped natural frequency. Particular solution (steady-state response): $$ \\theta_p (t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}} \\cos(\\omega t - \\delta) $$ where \\(\\delta\\) is the phase shift. Thus, the full solution is: \\[ \\theta (t) = \\theta_h (t) + \\theta_p (t) \\]","title":"1.1 Approximate Solution for Small-Angle Oscillations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-resonance-conditions","text":"Resonance occurs when the driving frequency \\(\\omega\\) is close to the natural frequency of the system. At resonance: \\[ \\omega \\approx \\omega_0 \\] Energy absorption is maximized, leading to large oscillations if damping is small.","title":"1.2 Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-influence-of-system-parameters","text":"Damping coefficient \\(b\\) : Higher damping suppresses oscillations and prevents resonance. Driving amplitude \\(A\\) : Larger forcing increases the steady-state oscillation amplitude. Driving frequency \\(\\omega\\) : Controls resonance and possible transition to chaotic motion. -This plot shows how \\(\\theta(t)\\) evolves over time for different parameter values. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define system parameters g = 9.81 # gravity (m/s^2) L = 1.0 # length of pendulum (m) b = 0.2 # damping coefficient A = 1.2 # driving amplitude omega = 2.0 # driving frequency # Define the equation of motion def pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Time span and initial conditions t_span = (0, 50) y0 = [0.1, 0] # Small initial displacement t_eval = np.linspace(*t_span, 1000) sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) # Plot the solution plt.figure(figsize=(8, 5)) plt.plot(sol.t, sol.y[0]) plt.xlabel('Time (s)') plt.ylabel('Theta (rad)') plt.title('Time Evolution of Theta') plt.grid() plt.show()","title":"2.1 Influence of System Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-regular-vs-chaotic-motion","text":"At low amplitudes, motion remains periodic. However, increasing \\(A\\) and modifying \\(\\omega\\) can lead to chaotic behavior, characterized by sensitivity to initial conditions.","title":"2.2 Regular vs. Chaotic Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#regular","text":"omega_values = np.linspace(1.0, 2.5, 50) theta_max = [] for w in omega_values: omega = w sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) theta_max.append(np.max(sol.y[0][-100:])) plt.figure(figsize=(8, 5)) plt.plot(omega_values, theta_max, 'bo', markersize=2) plt.xlabel('Driving Frequency \u03c9') plt.ylabel('Max Theta (rad)') plt.title('Bifurcation Diagram') plt.grid() plt.show() # Sample points at the period of the driving force poincare_t = np.arange(0, 50, 2 * np.pi / omega) poincare_theta = np.interp(poincare_t, sol.t, sol.y[0]) poincare_omega = np.interp(poincare_t, sol.t, sol.y[1]) plt.figure(figsize=(8, 5)) plt.scatter(poincare_theta, poincare_omega, s=10, color='r') plt.xlabel('Theta (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid() plt.show()","title":"Regular"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#chaotic","text":"plt.figure(figsize=(8, 5)) plt.plot(sol.y[0], sol.y[1], label='Phase Portrait') plt.xlabel('Theta (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.title('Phase Portrait of the Forced Damped Pendulum') plt.legend() plt.grid() plt.show()","title":"Chaotic"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy harvesting: Extracting vibrational energy for power generation. Suspension bridges: Resonance effects in structural engineering. Oscillating circuits: Analogous to forced RLC circuits in electrical engineering.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-computational-implementation","text":"We use Python to numerically solve and visualize the forced damped pendulum using the Runge-Kutta method. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define system parameters g = 9.81 # gravity (m/s^2) L = 1.0 # length of pendulum (m) b = 0.2 # damping coefficient A = 1.2 # driving amplitude omega = 2.0 # driving frequency def pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Time span and initial conditions t_span = (0, 50) y0 = [0.1, 0] # Small initial displacement t_eval = np.linspace(*t_span, 1000) sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) # Plot the solution plt.plot(sol.t, sol.y[0]) plt.xlabel('Time (s)') plt.ylabel('Theta (rad)') plt.title('Forced Damped Pendulum Motion') plt.grid() plt.show()","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-phase-portrait-and-poincare-section","text":"To visualize transitions to chaos, we plot phase portraits and Poincar\u00e9 sections: plt.plot(sol.y[0], sol.y[1], label='Phase Portrait') plt.xlabel('Theta (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.legend() plt.grid() plt.show()","title":"4.1 Phase Portrait and Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-discussion","text":"","title":"5. Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#51-limitations","text":"Small-angle approximation loses accuracy for large oscillations. Real-world damping is often nonlinear. External forcing may not always be purely periodic.","title":"5.1 Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#52-extensions","text":"Nonlinear damping: Explore air resistance effects. Stochastic forcing: Random perturbations for real-world modeling.","title":"5.2 Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-conclusion","text":"This study illustrates the rich dynamics of the forced damped pendulum, from simple harmonic motion to chaos. Through theoretical analysis and computational modeling, we gain insight into key factors influencing oscillatory systems.","title":"6. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}